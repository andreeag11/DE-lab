from machine import I2C
from machine import Pin
from sh1106 import SH1106_I2C
from ds3231 import DS3231
import time

# I2C(id, scl, sda, freq)
i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=100_000)

# Define the GPIO pin for the button including internal Pull-up
button = Pin(27, Pin.IN, Pin.PULL_UP)

# SH1106_I2C(width, height, i2c, addr, rotate)
display = SH1106_I2C(128, 64, i2c, addr=0x3c, rotate=180)
display.contrast(50)  # Set contrast to 50 %

RTC_ADDR=0x68
RTC_SECONDS = 0
RTC_MINUTES = 1
RTC_HOUR = 2

print("Stop the code execution by pressing `Ctrl+C` key.")
print("")
print("Scanning I2C... ", end="")
addrs = i2c.scan()
if RTC_ADDR in addrs:
    print(f"{hex(RTC_ADDR)} detected")
else:
    print("[ERROR] RTC is not detected")

try:
    while True:
        # readfrom_mem(addr, memaddr, nbytes)
        #seconds
        val = i2c.readfrom_mem(RTC_ADDR, RTC_SECONDS, 1)
        seconds_units = int.from_bytes(val, 'little') & 0b00001111
        seconds_tens = (int.from_bytes(val, 'little') & 0b01110000) >> 4;

        #minutes
        val = i2c.readfrom_mem(RTC_ADDR, RTC_MINUTES, 1)
        minute_units = int.from_bytes(val, 'little') & 0b00001111;
        minute_tens = (int.from_bytes(val, 'little') & 0b01110000) >> 4;

        #hour
        val = i2c.readfrom_mem(RTC_ADDR, RTC_HOUR, 1)

        # Bit 6: 12/24-hour format
        hour_format_12 = (int.from_bytes(val, 'little') & 0b01000000) >> 6;
        # Bit 5: AM/PM in 12-hour format or 20-hour format in 24-hour mode
        am_pm_12 = (int.from_bytes(val, 'little') & 0b00100000) >> 5;
        # Bits 3-0: Units digit in the hour
        hour_units = int.from_bytes(val, 'little') & 0b00001111;
        # Bit 4: 10-hour digit in 12-hour format
        hour_tens = (int.from_bytes(val, 'little') & 0b00010000) >> 4;


        # Interpretation for the hour
        if hour_format_12:
        # 12-hour format
            if am_pm_12:
                period = "PM"
            else:
                period = "AM"
            # if the format is 12h, display AM or PM at the end
            display.text(f"{period}", x=0, y=10)

        display.text(f"{hour_tens}{hour_units}:", x=0, y=0)
        display.text(f"{minute_tens}{minute_units}:", x=24, y=0)
        display.text(f"{seconds_tens}{seconds_units}", x=48, y=0)
        display.show();
        
        time.sleep(1)
        display.fill(0)
        
        #val3 = i2c.readfrom_mem(SENSOR_ADDR, SENSOR_CHECKSUM, 1)
        #print("checksum byte: {val3[0]}")

except KeyboardInterrupt:
    print("Ctrl+C Pressed. Exiting...")
    display.poweroff()
    
    # https://docs.micropython.org/en/latest/esp8266/tutorial/ssd1306.html

#_________________________________________________________________________
